// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.0
// source: geolocation.proto

package geolocation

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GeoLocationService_GetGeoLocationData_FullMethodName = "/geolocation.GeoLocationService/getGeoLocationData"
)

// GeoLocationServiceClient is the client API for GeoLocationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GeoLocationServiceClient interface {
	GetGeoLocationData(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
}

type geoLocationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGeoLocationServiceClient(cc grpc.ClientConnInterface) GeoLocationServiceClient {
	return &geoLocationServiceClient{cc}
}

func (c *geoLocationServiceClient) GetGeoLocationData(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, GeoLocationService_GetGeoLocationData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GeoLocationServiceServer is the server API for GeoLocationService service.
// All implementations must embed UnimplementedGeoLocationServiceServer
// for forward compatibility
type GeoLocationServiceServer interface {
	GetGeoLocationData(context.Context, *Message) (*Message, error)
	mustEmbedUnimplementedGeoLocationServiceServer()
}

// UnimplementedGeoLocationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGeoLocationServiceServer struct {
}

func (UnimplementedGeoLocationServiceServer) GetGeoLocationData(context.Context, *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGeoLocationData not implemented")
}
func (UnimplementedGeoLocationServiceServer) mustEmbedUnimplementedGeoLocationServiceServer() {}

// UnsafeGeoLocationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GeoLocationServiceServer will
// result in compilation errors.
type UnsafeGeoLocationServiceServer interface {
	mustEmbedUnimplementedGeoLocationServiceServer()
}

func RegisterGeoLocationServiceServer(s grpc.ServiceRegistrar, srv GeoLocationServiceServer) {
	s.RegisterService(&GeoLocationService_ServiceDesc, srv)
}

func _GeoLocationService_GetGeoLocationData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeoLocationServiceServer).GetGeoLocationData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeoLocationService_GetGeoLocationData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeoLocationServiceServer).GetGeoLocationData(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

// GeoLocationService_ServiceDesc is the grpc.ServiceDesc for GeoLocationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GeoLocationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "geolocation.GeoLocationService",
	HandlerType: (*GeoLocationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getGeoLocationData",
			Handler:    _GeoLocationService_GetGeoLocationData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "geolocation.proto",
}
